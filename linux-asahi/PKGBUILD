# AArch64 Apple Silicon (Asahi Linux)
# Maintainer: Janne Grunau <j@jannau.net>

buildarch=8

_rcver=6.8.9
#_rcrel=3
_asahirel=7
pkgrel=1

_m1n1_version=1.4.14

pkgbase=linux-asahi
#_commit_id=asahi-${_nextver}-${_asahirel}
_commit_id=asahi-${_rcver}${_rcrel+-rc}${_rcrel}-${_asahirel}
_srcname=linux-${_commit_id}
_kernelname=${pkgbase#linux}
_desc="AArch64 Apple Silicon (M1 development kernel)"
pkgver="${_rcver}${_rcrel:+rc}${_rcrel}.asahi${_asahirel}"
arch=('aarch64')
url="http://www.kernel.org/"
license=('GPL2')

makedepends=(
  bc dtc kmod libelf pahole cpio perl rust rust-src rust-bindgen tar xz xmlto
)
options=('!strip')
source=(
  https://github.com/AsahiLinux/linux/archive/${_commit_id}.tar.gz
  config         # the main kernel config file
  0001-READ-COMMIT-MESSAGE-macaudio-Enable-first-round-of-m.patch
  0002-READ-COMMIT-MESSAGE-macaudio-Enable-second-round-of-.patch
)
sha256sums=('ccf6b63d071e917ca6136550813e65b72314bb47a0d95f3dcdad9d34d53db1a9'
            'fc66eda26c5d3f44fbdc1a6275db1d2c3234d462d1d779b7f03be6fbc2ca6600'
            'd133d00c2198673b5f8a37249ea936a466dc98050a7b6b0767d7a6dfc42d8541'
            '95408f3b1cc8842e12ffaa3ce41ada149ee32fd5bd2bbafa95449388a37cef7c')
b2sums=('38c3314c89fdf21be35cf3b76de6050e57f55887ea13e30501f405f0bd79423526d546515df2d9db6368b6157629132f16cafb2ce44d97798e6a82bc2674412f'
        'b0d2441769fc170097592ab155f978c39a61f50d293897aef070505c1dd6f3679b2f3381d70138a7b04ff87a88260bf7a972d4ad0277ff51675ee704c96388c7'
        '2e0015cfb2aea1b4bc2da796f4a40c7d9ac21baf08aae572d28ecc4f0f399141072df42acb598176cfb06c6184dadc1ccfbf8a2a8b4e9085759260e800068e26'
        '2b0481f336dbf33c3909ac16a9b3ab8b425a31a085746730648910a00b8fabf90ba3988e4bb04d9c8801e1b100c6ecba858c191a2fab00c0af51f931c26a515d')
export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  cd $_srcname

  echo "Setting version..."
  echo "-$_asahirel-$pkgrel" > localversion.10-pkgrel

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  echo "Creating build directories..."
  mkdir -p build/base

  echo "Setting config (base)..."
  cp ../config build/base/.config
  make olddefconfig prepare O=$PWD/build/base
  diff -u ../config build/base/.config || :
  make -s kernelrelease O=$PWD/build/base > build/base/version

  echo "Prepared $pkgbase version $(<build/base/version)"
}

build() {
  cd $_srcname
  echo "Building base..."
  make all O=$PWD/build/base
}

_package_kernel() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=(coreutils kmod initramfs $2 "m1n1>=$_m1n1_version" "mesa-asahi-edge>=24.1.0_pre20240214-1")
  optdepends=('crda: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(WIREGUARD-MODULE linux=${pkgver})
  replaces=(wireguard-arch)
  conflicts=($pkgbase-edge)

  local kernver="$(<$O/version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$O"/arch/arm64/boot/Image "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$1" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make O="$O" INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install

  echo "Installing device trees..."
  install -Dt "$modulesdir/dtbs" "$O"/arch/arm64/boot/dts/apple/*.dtb

  # remove build and source links
  rm -f "$modulesdir"/{source,build}
}

_package() {
  cd $_srcname
  export O="$PWD/build/base"
  _package_kernel "$pkgbase"
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)

  KARCH=arm64

  cd $_srcname
  O=build/base
  local builddir="$pkgdir/usr/lib/modules/$(<${O}/version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 $O/.config Makefile $O/Module.symvers $O/System.map \
    localversion.* $O/version $O/vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  cp -t "$builddir" -a scripts $O/scripts

  # required when STACK_VALIDATION is enabled
  #install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  #install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  echo "Installing headers..."
  cp -t "$builddir" -a include $O/include

  install -Dt "${builddir}/arch/${KARCH}" -m644 arch/${KARCH}/Makefile
  install -Dt "${builddir}/arch/${KARCH}/kernel" -m644 $O/arch/${KARCH}/kernel/asm-offsets.s
  cp -t "${builddir}/arch/${KARCH}" -a arch/${KARCH}/include $O/arch/${KARCH}/include

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */${KARCH}/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Removing cmd files..."
  find "$builddir" -type f -name '*.cmd' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"

}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
