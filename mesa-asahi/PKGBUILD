# Maintainer: Jos Dehaes <jos.dehaes@gmail.com>
# Maintainer: Matthias Kurz <m.kurz@irregular.at>

highmem=1

pkgname=(mesa-asahi mesa-asahi-fex-emu-x86_64-overlay mesa-asahi-fex-emu-x86-overlay mesa-asahi-dummy)
pkgdesc="An open-source implementation of the OpenGL specification"
_asahiver=20241211
_commit=asahi-$_asahiver
pkgver=25.0.0_pre$_asahiver
pkgrel=6
arch=('x86_64' 'aarch64')
makedepends=('python-mako' 'libxml2' 'libx11' 'xorgproto' 'libdrm' 'libxshmfence' 'libxxf86vm'
  'libxdamage' 'libvdpau' 'libva' 'wayland' 'wayland-protocols' 'zstd' 'elfutils' 'llvm' 'spirv-llvm-translator'
  'libomxil-bellagio' 'libclc' 'clang' 'libglvnd' 'libunwind' 'lm_sensors' 'libxrandr'
  'systemd' 'valgrind' 'glslang' 'vulkan-icd-loader' 'directx-headers' 'cmake' 'meson' 'python-pycparser' 'python-packaging' 'python-pyaml'
  'erofs-utils' 'lz4' 'patchelf' 'rust-bindgen')

# to build the 32 bit overlay you need these on the host machine
#    'lib32-llvm' 'lib32-llvm-libs' 'lib32-libpciaccess' 'lib32-libglvnd' 'lib32-libxrandr' 'lib32-spirv-tools'
#    'lib32-spirv-llvm-translator' 'lib32-clang' 'lib32-libxfixes' 'lib32-libvdpau' 'lib32-libva' 'lib32-xcb-util-keysyms'

depends=('egl-wayland' 'libdrm' 'wayland' 'libxxf86vm' 'libxdamage' 'libxshmfence' 'libelf' 'libomxil-bellagio'
  'libunwind' 'llvm-libs' 'lm_sensors' 'libglvnd' 'zstd' 'vulkan-icd-loader')
optdepends=('vulkan-mesa-layers: additional vulkan layers')
url="https://www.mesa3d.org/"
license=('custom')
options=('!debug' '!lto')
source=(
  https://gitlab.freedesktop.org/asahi/mesa/-/archive/$_commit/mesa-$_commit.tar.gz
  LICENSE
  Mesa-MLAA-License-Clarification-Email.txt
  gnome-shell-glthread-disable.patch
)
sha512sums=(
  '3cffd24548a3303ad318f6ddf9a39d908c503090b1dcc389e4636565e27cdc69a7da28781d59bda092a07918863ac1938f34232b1554545ec5996cbcccaadab2'
  'f9f0d0ccf166fe6cb684478b6f1e1ab1f2850431c06aa041738563eb1808a004e52cdec823c103c9e180f03ffc083e95974d291353f0220fe52ae6d4897fecc7'
  'ecdabad21a86f04d51ba709a90fbeccb3004c6e8af3546edc530dcb4727787ed5d6a63043b6ab50b4c0a46de0894b6f3c594101b4d25f7831dee9f33fd2a7e31'
  'db08a07a6ee8cc09ae827688089e1e1e7aa2c43f9a1a9260012206052bcb9432d1c1a90657bc86618719632ba6cbb4502003c181321bc01c713f4e02dae8b4f1'
)

prepare() {
  cd mesa-$_commit
}

meson_build() {
  # We've gotten a report that enabling LTO for mesa breaks some games. See
  # https://bugzilla.redhat.com/show_bug.cgi?id=1862771 for details.
  # Disable LTO for now (b_lto)
  meson mesa-$_commit $BUILDDIR $CROSS \
    --prefix=/usr \
    --libdir=$LIBDIR \
    --libexecdir=$LIBDIR \
    --sbindir=bin \
    -Db_ndebug=true \
    -Db_lto=false \
    -Dplatforms=x11,wayland \
    -Dosmesa=true \
    -Dgallium-drivers=swrast,virgl,zink,asahi \
    -Dgallium-vdpau=enabled \
    -Dgallium-va=enabled \
    -Dgallium-xa=disabled \
    -Dgallium-nine=true \
    -Dteflon=$TEFLON \
    -Dgallium-opencl=icd \
    -Dgallium-rusticl=true \
    -Dvulkan-drivers=swrast,asahi \
    -Dvulkan-layers=device-select \
    -Dshared-glapi=enabled \
    -Dgles1=enabled \
    -Dgles2=enabled \
    -Dopengl=true \
    -Dgbm=enabled \
    -Dglx=dri \
    -Degl=enabled \
    -Dglvnd=enabled \
    -Dintel-rt=disabled \
    -Dmicrosoft-clc=disabled \
    -Dllvm=enabled \
    -Dshared-llvm=enabled \
    -Dvalgrind=disabled \
    -Dbuild-tests=false \
    -Dselinux=true \
    -Dandroid-libbacktrace=disabled \
    -Dglx-read-only-text=$GLX_READ_ONLY_TEXT \

  # Print config
  meson configure --no-pager $BUILDDIR

  ninja -C $BUILDDIR
  meson compile -C $BUILDDIR

  # fake installation to be seperated into packages
  # outside of fakeroot but mesa doesn't need to chown/mod
  DESTDIR="${srcdir}/fakeinstall" meson install -C $BUILDDIR
}

build() {
  # Build only minimal debug info to reduce size
  CFLAGS+=' -g1'
  CXXFLAGS+=' -g1'
  CROSS=''
  LIBDIR=lib
  RUSTICL='true'
  TEFLON='true'
  GLX_READ_ONLY_TEXT='false'
  BUILDDIR=build

  meson_build
}

_install() {
  local src f dir
  for src; do
    f="${src#fakeinstall/}"
    # If $f contains no slash (=directly in the root), then return empty string, otherwise parent folder (removing last /*)
    dir="${pkgdir}/$([[ "$f" == */* ]] && printf "%s" "${f%/*}" || printf "")"
    install -m755 -d "${dir}"
    mv -v "${src}" "${dir}/"
  done
}

package_mesa-asahi() {
  provides=('mesa-libgl' 'opengl-driver' 'mesa' 'mesa-asahi' 'vulkan-asahi' 'vulkan-driver')
  conflicts=('mesa-libgl' 'mesa' 'mesa-asahi-edge' 'vulkan-swrast')

  if [[ "$CARCH" == "x86_64" ]]; then
    return 0
  fi

  LIBDIR=lib

  _install fakeinstall/usr/share/drirc.d/00-mesa-defaults.conf
  _install fakeinstall/usr/share/glvnd/egl_vendor.d/50_mesa.json

  #install libs
  _install fakeinstall/usr/$LIBDIR/dri/*.so
  _install fakeinstall/usr/$LIBDIR/vdpau
  _install fakeinstall/usr/$LIBDIR/gallium-pipe

  _install fakeinstall/usr/$LIBDIR/libMesa*
  _install fakeinstall/usr/$LIBDIR/libRusticl*
  _install fakeinstall/usr/$LIBDIR/lib{gbm,glapi}.so*
  _install fakeinstall/usr/$LIBDIR/gbm/dri_gbm.so*
  _install fakeinstall/usr/$LIBDIR/libOSMesa.so*

  _install fakeinstall/usr/include
  rm -f fakeinstall/usr/$LIBDIR/pkgconfig/{egl,gl}.pc
  _install fakeinstall/usr/$LIBDIR/pkgconfig

  _install fakeinstall/etc

  # libglvnd support
  _install fakeinstall/usr/$LIBDIR/libGL*
  _install fakeinstall/usr/$LIBDIR/libEG*

  # vulkan support
  _install fakeinstall/usr/share/vulkan
  _install fakeinstall/usr/$LIBDIR/libvulkan*
  _install fakeinstall/usr/$LIBDIR/libgallium*
  _install fakeinstall/usr/$LIBDIR/libVkLayer*

  # glvnd needs a default provider for indirect rendering where it cannot
  # determine the vendor
  ln -s /usr/$LIBDIR/libGLX_mesa.so.0 "${pkgdir}/usr/$LIBDIR/libGLX_system.so.0"

  # make sure there are no files left to install
  find fakeinstall -depth -print0 | xargs -0 rmdir

  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" LICENSE
}

create_overlay() {
  OVERLAY_NAME=$1
  JSON_FILE=$2
  #dri
  install -Dpm0755 -s -t "fexov/usr/$LIBDIR" "$srcdir/fakeinstall/usr/$LIBDIR/libgallium-25.0.0-devel.so"
  install -Dpm0755 -s -t "fexov/usr/$LIBDIR/ovl_dri" "$srcdir/fakeinstall/usr/$LIBDIR/dri/libdril_dri.so"
  ln -s libdril_dri.so fexov/usr/$LIBDIR/ovl_dri/apple_dri.so
  ln -s libdril_dri.so fexov/usr/$LIBDIR/ovl_dri/asahi_dri.so
  ln -s ovl_dri fexov/usr/$LIBDIR/dri
  # openGL
  install -Dpm0755 -s -t "fexov/usr/$LIBDIR/" "$srcdir/fakeinstall/usr/$LIBDIR/libEGL_mesa.so.0.0.0" "$srcdir/fakeinstall/usr/$LIBDIR/libGLX_mesa.so.0.0.0" "$srcdir/fakeinstall/usr/$LIBDIR/libglapi.so.0.0.0"
  ln -s libEGL_mesa.so.0.0.0 fexov/usr/$LIBDIR/libEGL_mesa.so.0
  ln -s libGLX_mesa.so.0.0.0 fexov/usr/$LIBDIR/libGLX_mesa.so.0
  ln -s libglapi.so.0.0.0 fexov/usr/$LIBDIR/libglapi.so.0
  ln -s libGLX_mesa.so.0.0.0 fexov/usr/$LIBDIR/libGLX_system.so.0
  ln -s libGLX_mesa.so.0.0.0 fexov/usr/$LIBDIR/libGLX_indirect.so.0
  #openCL
  if [ "$RUSTICL" == 'true' ]; then
    install -Dpm0755 -s -t "fexov/usr/$LIBDIR/" "$srcdir/fakeinstall/usr/$LIBDIR/libRusticlOpenCL.so.1.0.0"
    ln -s libRusticlOpenCL.so.1.0.0 fexov/usr/$LIBDIR/libRusticlOpenCL.so.1
    install -Dpm0644 -t "fexov/etc/OpenCL/ovl_vendors/" $srcdir/fakeinstall/etc/OpenCL/vendors/rusticl.icd
    ln -s ovl_vendors fexov/etc/OpenCL/vendors
  fi

  # vulkan
  install -Dpm0755 -s -t "fexov/usr/$LIBDIR/" "$srcdir/fakeinstall/usr/$LIBDIR/libvulkan_asahi.so" "$srcdir/fakeinstall/usr/$LIBDIR/libVkLayer_MESA_device_select.so"

  install -Dpm0644 -t "fexov/usr/share/vulkan/ovl_icd.d/" "$srcdir/fakeinstall/usr/share/vulkan/icd.d/$JSON_FILE"
  install -Dpm0644 -t "fexov/usr/share/vulkan/implicit_layer.d/" "$srcdir/fakeinstall/usr/share/vulkan/implicit_layer.d/VkLayer_MESA_device_select.json"
  ln -s ovl_icd.d "fexov/usr/share/vulkan/icd.d"

  #gbm
  install -Dpm0755 -s -t fexov/usr/$LIBDIR/ "$srcdir/fakeinstall/usr/$LIBDIR/libgbm.so.1.0.0"
  install -Dpm0755 -s -t fexov/usr/$LIBDIR/gbm "$srcdir/fakeinstall/usr/$LIBDIR/gbm/dri_gbm.so"

  #glvnd
  install -Dpm0644 -t "fexov/usr/share/glvnd/ovl_egl_vendor.d/" "$srcdir/fakeinstall/usr/share/glvnd/egl_vendor.d/50_mesa.json"
  ln -s ovl_egl_vendor.d fexov/usr/share/glvnd/egl_vendor.d

  # fedora packages this lib, for some reason it comes from rootfs
  install -Dpm0755 -s -t fexov/usr/$LIBDIR/ "/usr/$LIBDIR/libLLVMSPIRVLib.so.18.1"

  patchelf --add-rpath /usr/$LIBDIR fexov/usr/$LIBDIR/gbm/dri_gbm.so
  patchelf --add-rpath /usr/$LIBDIR fexov/usr/$LIBDIR/libGLX_mesa.so.0.0.0
  patchelf --add-rpath /usr/$LIBDIR fexov/usr/$LIBDIR/libEGL_mesa.so.0.0.0
  if [ "$RUSTICL" == 'true' ]; then
    patchelf --add-rpath /usr/$LIBDIR fexov/usr/$LIBDIR/libRusticlOpenCL.so.1.0.0
  fi

  mkfs.erofs -z lz4 $OVERLAY_NAME fexov
}

package_mesa-asahi-fex-emu-x86_64-overlay() {
  arch=(any)
  provides=('mesa-asahi-fex-emu-x86_64-overlay')

  if [[ "$CARCH" != "x86_64" ]]; then
    return 0
  fi

  rm -rf fexov
  LIBDIR=lib
  create_overlay mesa-x86_64.erofs asahi_icd.x86_64.json
  install -Dpm0644 -t ${pkgdir}/usr/share/fex-emu/overlays/ mesa-x86_64.erofs
}

package_mesa-asahi-fex-emu-x86-overlay() {
  arch=(any)
  provides=('mesa-asahi-fex-emu-x86-overlay')

  if [[ "$CARCH" != "x86_64" ]]; then
    return 0
  fi

  rm -rf buildx && mkdir -p buildx
  rm -rf fexov
  rm -rf fakeinstall
  rm -rf ${pkgdir:?}/*

  CFLAGS+=' -g1 -m32 -march=i686'
  CXXFLAGS+=' -g1 -m32 -march=i686'
  CROSS='--cross-file=../cross_x86'
  LIBDIR=lib32
  RUSTICL='false'
  TEFLON='false'
  GLX_READ_ONLY_TEXT='true'
  BUILDDIR=buildx

  meson_build

  create_overlay mesa-i386.erofs asahi_icd.i686.json
  install -Dpm0644 -t ${pkgdir}/usr/share/fex-emu/overlays/ mesa-i386.erofs
}

package_mesa-asahi-dummy() {
  arch=(any)
  provides=(
    'mesa' 'lib32-mesa'
    'opengl-driver' 'lib32-opengl-driver'
    'vulkan-driver' 'lib32-vulkan-driver'
    'mesa-libgl' 'lib32-mesa-libgl'
    'vulkan-swrast' 'lib32-vulkan-swrast'
  )
}
